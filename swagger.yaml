openapi: 3.0.0
info:
  title: CommonGround API
  description: CommonGround API specification
  version: 0.0.1
servers:
  - url: https://localhost:8080
    description: Local server with WireGuard
paths:
  /api/issues:
    get:
      summary: List issues
      description: This endpoint returns all issues
      operationId: getIssues
      tags:
        - Issue
      parameters:
        - name: sort
          in: query
          default: createdAt,asc
          schema:
            type: string
        - name: page
          in: query
          default: 5
          schema:
            type: number
        - name: size
          in: query
          default: 5
          schema:
            type: number
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        createdAt:
                          type: string
                          format: date-time
                        updatedAt:
                          type: string
                          format: date-time
                          description: The last time the issue title, description, or insight was updated
                        title:
                          type: string
                        insight:
                          type: string
                        userFollow:
                          type: object
                          properties:
                            follow:
                              type: boolean
                        viewpointCount:
                          type: number
                  page:
                    type: object
                    properties:
                      size:
                        type: number
                      totalElement:
                        type: number
                      totalPage:
                        type: number
                      number:
                        type: number
    post:
      summary: Create a new issue
      description: This endpoint is used to create a new an issue
      operationId: createIssue
      tags:
        - Issue
        - Admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                insight:
                  type: string
                  description: It should usually be generated by the AI Team's service, but can be
                    manually set by the admin
                  example: "[San Francisco, CA](0) — In a significant leap forward for electric
                    vehicle (EV) technology, researchers at [GreenTech
                    Innovations](1) announced today the development of a [new
                    battery](1,2) that could revolutionize the industry"
                facts:
                  type: array
                  description: List of fact referenced by issue's insight
                  example:
                    - f1b1b1b1-b1b1-b1b1-b1b1-b1b1b1b1b1b1
                    - f2b2b2b2-b2b2-b2b2-b2b2-b2b2b2b2b2
                    - f3b3b3b3-b3b3-b3b3-b3b3-b3b3b3b3b3
                  items:
                    type: string
                    format: uuid
              required:
                - title
                - description
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  createdAt:
                    type: string
                    format: date-time
                  updatedAt:
                    type: string
                    format: date-time
                    description: The last time the issue title, description, or insight was updated
                  title:
                    type: string
                  insight:
                    type: string
                    example: "[San Francisco, CA](0) — In a significant leap forward for electric
                      vehicle (EV) technology, researchers at [GreenTech
                      Innovations](1) announced today the development of a [new
                      battery](1,2) that could revolutionize the industry"
                  authorId:
                    type: string
                    format: uuid
                  authorName:
                    type: string
                  authorAvatar:
                    type: string
                    format: uri
                  userFollow:
                    type: object
                    properties:
                      follow:
                        type: boolean
                  viewpointCount:
                    type: number
                  facts:
                    type: array
                    description: List of fact referenced by issue's insight, displayed in the
                      insight link as the position starting from 0 in the list
                    items:
                      $ref: "#/components/schemas/Issue/properties/facts/items"
  "/api/issue/{id}":
    get:
      summary: Get an issue
      description: This endpoint returns an issue
      operationId: getIssue
      tags:
        - Issue
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the issue
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/paths/~1api~1issues/post/responses/200/content/application~1json/schem\
                  a"
    put:
      summary: Update an issue
      description: This endpoint is used to update an issue
      operationId: updateIssue
      tags:
        - Issue
        - Admin
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the issue
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/paths/~1api~1issues/post/requestBody/content/application~1json/schema"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/paths/~1api~1issues/post/responses/200/content/application~1json/schem\
                  a"
    delete:
      summary: Delete an issue
      description: This endpoint is used to delete an issue
      operationId: deleteIssue
      tags:
        - Issue
        - Admin
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the issue
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: No content
  "/api/issue/{id}/follow/me":
    post:
      summary: Follow an issue
      description: This endpoint is used to follow an issue
      operationId: followIssue
      tags:
        - Issue
      parameters:
        - name: id
          in: path
          required: true
          description: The uuid of specific resource
          schema:
            type: string
            format: uuid
      requestBody:
        require: true
        content:
          application/json:
            schema:
              type: object
              properties:
                follow:
                  type: boolean
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  follow:
                    type: boolean
                  updatedAt:
                    type: string
                    format: date-time
  "/api/issue/{id}/facts":
    get:
      summary: List facts of viewpoints used in the issue
      description: This endpoint returns all facts of viewpoints used in the issue
      operationId: getIssueFacts
      tags:
        - Issue
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the issue
          schema:
            type: string
            format: uuid
        - $ref: "#/paths/~1api~1issues/get/parameters/0"
        - $ref: "#/paths/~1api~1issues/get/parameters/1"
        - $ref: "#/paths/~1api~1issues/get/parameters/2"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: "#/components/schemas/Issue/properties/facts/items"
                  page:
                    $ref: "#/paths/~1api~1issues/get/responses/200/content/application~1json/schema\
                      /properties/page"
    post:
      summary: Add a fact to the issue
      description: This endpoint is used to add a fact to the issue
      operationId: addIssueFact
      tags:
        - Issue
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the issue
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                factIds:
                  type: array
                  items:
                    type: string
                    format: uuid
                    description: The unique identifier of the fact
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Issue/properties/facts/items"
  "/api/issue/{id}/viewpoints":
    get:
      summary: List viewpoints
      description: This endpoint returns all viewpoints of an issue
      operationId: getViewpointsByIssue
      tags:
        - Issue
      parameters:
        - $ref: "#/paths/~1api~1issue~1%7Bid%7D~1follow~1me/post/parameters/0"
        - $ref: "#/paths/~1api~1issues/get/parameters/0"
        - $ref: "#/paths/~1api~1issues/get/parameters/1"
        - $ref: "#/paths/~1api~1issues/get/parameters/2"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                          description: The unique identifier of the ViewPoint
                        createdAt:
                          type: string
                          format: date-time
                          description: The date and time the ViewPoint was created
                        updatedAt:
                          type: string
                          format: date-time
                          description: The date and time the ViewPoint was last updated
                        title:
                          type: string
                          description: The name of the ViewPoint
                        content:
                          type: string
                          description: The content of the ViewPoint
                        authorId:
                          type: string
                          format: uuid
                          description: The unique identifier of the author of the ViewPoint
                        authorName:
                          type: string
                          description: The name of the author of the ViewPoint
                        authorAvatar:
                          type: string
                          format: uri
                        userReaction:
                          type: object
                          properties:
                            reaction:
                              type: string
                              description: The reaction of the user
                              format: enum
                              enum:
                                - NONE
                                - LIKE
                                - REASONABLE
                                - DISLIKE
                        likeCount:
                          type: integer
                          description: The number of likes the ViewPoint has
                        reasonableCount:
                          type: integer
                          description: The number of resonables the ViewPoint has
                        dislikeCount:
                          type: integer
                          description: The number of dislikes the ViewPoint has
                        facts:
                          type: array
                          items:
                            $ref: "#/components/schemas/Issue/properties/facts/items"
                  page:
                    $ref: "#/paths/~1api~1issues/get/responses/200/content/application~1json/schema\
                      /properties/page"
    post:
      summary: Create a new viewpoint
      description: This endpoint is used to create a new viewpoint for an issue
      operationId: createViewPoint
      tags:
        - Issue
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: The name of the ViewPoint
                content:
                  type: string
                  description: The content of the ViewPoint
                facts:
                  type: array
                  items:
                    type: string
                    format: uuid
                    description: The unique identifier of the fact
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/paths/~1api~1issue~1%7Bid%7D~1viewpoints/get/responses/200/content/app\
                  lication~1json/schema/properties/content/items"
  /api/viewpoints:
    get:
      summary: List viewpoints
      description: This endpoint returns all viewpoints
      operationId: getViewPoints
      tags:
        - ViewPoint
      parameters:
        - $ref: "#/paths/~1api~1issues/get/parameters/0"
        - $ref: "#/paths/~1api~1issues/get/parameters/1"
        - $ref: "#/paths/~1api~1issues/get/parameters/2"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: "#/paths/~1api~1issue~1%7Bid%7D~1viewpoints/get/responses/200/content/app\
                        lication~1json/schema/properties/content/items"
                  page:
                    $ref: "#/paths/~1api~1issues/get/responses/200/content/application~1json/schema\
                      /properties/page"
  "/api/viewpoint/{id}":
    get:
      summary: Get specific viewpoint information
      description: This endpoint returns specific viewpoint information by viewpoint id
      operationId: getViewPoint
      tags:
        - ViewPoint
      parameters:
        - $ref: "#/paths/~1api~1issue~1%7Bid%7D~1follow~1me/post/parameters/0"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/paths/~1api~1issue~1%7Bid%7D~1viewpoints/get/responses/200/content/app\
                  lication~1json/schema/properties/content/items"
    put:
      summary: Update a viewpoint
      description: This endpoint is used to update a viewpoint
      operationId: updateViewPoint
      tags:
        - ViewPoint
      parameters:
        - $ref: "#/paths/~1api~1issue~1%7Bid%7D~1follow~1me/post/parameters/0"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/paths/~1api~1issue~1%7Bid%7D~1viewpoints/post/requestBody/content/appl\
                ication~1json/schema"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/paths/~1api~1issue~1%7Bid%7D~1viewpoints/get/responses/200/content/app\
                  lication~1json/schema/properties/content/items"
    delete:
      summary: Delete a viewpoint
      description: This endpoint is used to delete a viewpoint
      operationId: deleteViewPoint
      tags:
        - ViewPoint
      parameters:
        - $ref: "#/paths/~1api~1issue~1%7Bid%7D~1follow~1me/post/parameters/0"
      responses:
        "204":
          description: No content
  "/api/viewpoint/{id}/reaction/me":
    post:
      summary: React to a viewpoint
      description: This endpoint is used to react to a viewpoint
      operationId: reactToViewPoint
      tags:
        - ViewPoint
      parameters:
        - $ref: "#/paths/~1api~1issue~1%7Bid%7D~1follow~1me/post/parameters/0"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reaction:
                  type: string
                  description: The reaction of the user
                  format: enum
                  enum:
                    - NONE
                    - LIKE
                    - REASONABLE
                    - DISLIKE
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/paths/~1api~1viewpoint~1%7Bid%7D~1reaction~1me/post/requestBody/conten\
                  t/application~1json/schema"
  "/api/viewpoint/{id}/facts":
    get:
      summary: List facts of a viewpoint
      description: This endpoint returns all facts of a viewpoint
      operationId: getFactsOfViewPoint
      tags:
        - ViewPoint
      parameters:
        - $ref: "#/paths/~1api~1issue~1%7Bid%7D~1follow~1me/post/parameters/0"
        - $ref: "#/paths/~1api~1issues/get/parameters/1"
        - $ref: "#/paths/~1api~1issues/get/parameters/2"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: "#/components/schemas/Issue/properties/facts/items"
                  page:
                    $ref: "#/paths/~1api~1issues/get/responses/200/content/application~1json/schema\
                      /properties/page"
    post:
      summary: Add a fact to a viewpoint
      description: This endpoint is used to add a fact to a viewpoint
      operationId: addFactToViewPoint
      tags:
        - ViewPoint
      parameters:
        - $ref: "#/paths/~1api~1issue~1%7Bid%7D~1follow~1me/post/parameters/0"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                factId:
                  type: string
                  format: uuid
      responses:
        "204":
          description: No content
  "/api/viewpoint/{id}/fact/{factId}":
    delete:
      summary: Unlink a fact from a viewpoint
      description: This endpoint is used to remove a fact from a viewpoint
      operationId: removeFactFromViewPoint
      tags:
        - ViewPoint
      parameters:
        - $ref: "#/paths/~1api~1issue~1%7Bid%7D~1follow~1me/post/parameters/0"
        - name: factId
          in: path
          required: true
          description: The uuid of fact
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: No content
  "/api/viewpoint/{id}/replies":
    get:
      summary: List replies
      description: This endpoint will return all replies of a viewpoints
      operationId: getRepliesByViewpoint
      tags:
        - ViewPoint
      parameters:
        - $ref: "#/paths/~1api~1issue~1%7Bid%7D~1follow~1me/post/parameters/0"
        - $ref: "#/paths/~1api~1issues/get/parameters/0"
        - $ref: "#/paths/~1api~1issues/get/parameters/1"
        - $ref: "#/paths/~1api~1issues/get/parameters/2"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                          description: The unique identifier of the Reply
                        createdAt:
                          type: string
                          format: date-time
                          description: The date and time the Reply was created
                        updatedAt:
                          type: string
                          format: date-time
                          description: The date and time the Reply was last updated
                        content:
                          type: string
                          description: The content of the Reply
                          example: "[[Quote]](0) This is a reply [first imported fact](0) [second imported
                            fact](1,2) [[Quote]](1)"
                        authorId:
                          type: string
                          format: uuid
                          description: The unique identifier of the author of the Reply
                        authorName:
                          type: string
                          description: The name of the author of the Reply
                        authorAvatar:
                          type: string
                          format: uri
                        userReaction:
                          type: object
                          properties:
                            reaction:
                              type: string
                              description: The reaction of the user
                              format: enum
                              enum:
                                - NONE
                                - LIKE
                                - REASONABLE
                                - DISLIKE
                        likeCount:
                          type: integer
                          description: The number of likes the Reply has
                        reasonableCount:
                          type: integer
                          description: The number of reasonables the Reply has
                        dislikeCount:
                          type: integer
                          description: The number of dislikes the Reply
                        quotes:
                          type: array
                          description: The list of quotes
                          items:
                            type: object
                            properties:
                              replyId:
                                type: string
                                format: uuid
                                description: The id of the Reply
                              authorId:
                                type: string
                                format: uuid
                                description: The unique identifier of the author of the Reply
                              authorName:
                                type: string
                                description: The name of the author of the Reply
                              authorAvatar:
                                type: string
                                format: uri
                              content:
                                type: string
                                description: The part of the content of the Reply
                              start:
                                type: integer
                                description: The start position of the content of the Reply
                              end:
                                type: integer
                                description: The end position of the content of the Reply
                        facts:
                          type: array
                          items:
                            $ref: "#/components/schemas/Issue/properties/facts/items"
                  page:
                    $ref: "#/paths/~1api~1issues/get/responses/200/content/application~1json/schema\
                      /properties/page"
    post:
      summary: Create a new reply
      description: This endpoint is used to create a new reply for an viewpoint
      operationId: createReply
      tags:
        - ViewPoint
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  description: The content of the Reply
                quotes:
                  type: array
                  items:
                    type: object
                    properties:
                      replyId:
                        type: string
                        format: uuid
                        description: The id of the Reply
                      start:
                        type: integer
                        description: The start position of the content of the Reply
                      end:
                        type: integer
                        description: The end position of the content of the Reply
                facts:
                  type: array
                  items:
                    type: string
                    format: uuid
                    description: The unique identifier of the fact
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/paths/~1api~1viewpoint~1%7Bid%7D~1replies/get/responses/200/content/ap\
                  plication~1json/schema/properties/content/items"
  /api/facts:
    get:
      summary: List facts
      description: This endpoint returns all facts
      operationId: getFactsList
      tags:
        - Fact
      parameters:
        - $ref: "#/paths/~1api~1issues/get/parameters/0"
        - $ref: "#/paths/~1api~1issues/get/parameters/1"
        - $ref: "#/paths/~1api~1issues/get/parameters/2"
        - name: search
          in: query
          nullable: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: "#/components/schemas/Issue/properties/facts/items"
                  page:
                    $ref: "#/paths/~1api~1issues/get/responses/200/content/application~1json/schema\
                      /properties/page"
    post:
      summary: Create a new fact
      description: This endpoint is used to create a new fact for user
      operationId: createFact
      tags:
        - Fact
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                references:
                  type: array
                  items:
                    $ref: "#/components/schemas/UpdateFact/properties/references/items"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Issue/properties/facts/items"
  "/api/fact/{id}":
    get:
      summary: Get specific fact information
      description: This endpoint returns specific fact information by fact id
      operationId: getFact
      tags:
        - Fact
      parameters:
        - $ref: "#/paths/~1api~1issue~1%7Bid%7D~1follow~1me/post/parameters/0"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Issue/properties/facts/items"
        "404":
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                  status:
                    type: number
                  title:
                    type: string
                  detail:
                    type: string
                  instance:
                    type: string
    put:
      summary: Update properties for a selected fact
      description: This endpoint is used to update properties of specific fact by fact id
      operationId: updateFact
      tags:
        - Fact
      parameters:
        - $ref: "#/paths/~1api~1issue~1%7Bid%7D~1follow~1me/post/parameters/0"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/paths/~1api~1facts/post/requestBody/content/application~1json/schema"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Issue/properties/facts/items"
    delete:
      summary: Delete selected fact
      description: This endpoint is used to delete specific fact by fact id
      operationId: deletedFact
      tags:
        - Fact
      parameters:
        - $ref: "#/paths/~1api~1issue~1%7Bid%7D~1follow~1me/post/parameters/0"
      responses:
        "204":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  detailMessage:
                    type: string
  "/api/fact/{id}/references":
    get:
      summary: List references of specific fact
      description: This endpoint returns references of specific fact by fact id
      operationId: getReferencesOfFact
      tags:
        - Fact
      parameters:
        - $ref: "#/paths/~1api~1issue~1%7Bid%7D~1follow~1me/post/parameters/0"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Fact/properties/references/items"
    post:
      summary: Add references to specific fact
      description: This endpoint is used to add new reference to specific fact by fact id
      operationId: addReferences
      tags:
        - Fact
      parameters:
        - $ref: "#/paths/~1api~1issue~1%7Bid%7D~1follow~1me/post/parameters/0"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  url:
                    type: string
                    format: uri
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Fact/properties/references/items"
  "/api/fact/{id}/reference/{referenceId}":
    delete:
      summary: Delete selected reference
      description: This endpoint is used to delete specific reference by reference id
      operationId: deleteReference
      tags:
        - Fact
      parameters:
        - $ref: "#/paths/~1api~1issue~1%7Bid%7D~1follow~1me/post/parameters/0"
        - name: referenceId
          in: path
          required: true
          description: The uuid of specific reference
          schema:
            type: string
            format: uuid
      responses:
        "204":
          $ref: "#/paths/~1api~1fact~1%7Bid%7D/delete/responses/204"
  /api/references:
    post:
      summary: Create a new reference without a fact
      description: This endpoint is used to create a new reference and without a fact
      operationId: createReference
      tags:
        - Reference
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateFact/properties/references/items"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Fact/properties/references/items"
  "/api/issue/{id}/timeline":
    get:
      summary: Get all timelines for a specific issue
      description: This endpoint returns all timelines for a specific issue
      operationId: getTimelines
      tags:
        - Timeline
      parameters:
        - $ref: "#/paths/~1api~1issue~1%7Bid%7D~1follow~1me/post/parameters/0"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                          description: The unique identifier of the timeline's node
                        createdAt:
                          type: string
                          format: date-time
                        updatedAt:
                          type: string
                          format: date-time
                        title:
                          type: string
                          description: The name of the timeline
                        description:
                          type: string
                          description: The description of the timeline
                        date:
                          type: string
                          format: date
                          description: The date of the timeline (YYYY-MM-DD)
                          example: 2020-01-01
    post:
      summary: Create a new timeline
      description: This endpoint is used to create a new timeline for an issue
      operationId: createTimeline
      tags:
        - Timeline
        - Admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: The name of the timeline
                description:
                  type: string
                  description: The description of the timeline
                date:
                  type: string
                  format: date
                  description: The date of the timeline (YYYY-MM-DD)
                  example: 2020-01-01
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/paths/~1api~1issue~1%7Bid%7D~1timeline/get/responses/200/content/appli\
                  cation~1json/schema/properties/content/items"
  "/api/timeline/node/{id}":
    get:
      summary: Get a timeline
      description: This endpoint returns a timeline
      operationId: getTimeline
      tags:
        - Timeline
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the timeline
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/paths/~1api~1issue~1%7Bid%7D~1timeline/get/responses/200/content/appli\
                  cation~1json/schema/properties/content/items"
    put:
      summary: Update a timeline
      description: This endpoint is used to update a timeline
      operationId: updateTimeline
      tags:
        - Timeline
        - Admin
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the timeline
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/paths/~1api~1issue~1%7Bid%7D~1timeline/post/requestBody/content/applic\
                ation~1json/schema"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/paths/~1api~1issue~1%7Bid%7D~1timeline/get/responses/200/content/appli\
                  cation~1json/schema/properties/content/items"
    delete:
      summary: Delete a timeline
      description: This endpoint is used to delete a timeline
      operationId: deleteTimeline
      tags:
        - Timeline
        - Admin
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the timeline
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Successful response
  "/api/reply/{id}":
    get:
      summary: Get specific reply information
      description: This endpoint returns specific reply information by reply id
      operationId: getReply
      tags:
        - Reply
      parameters:
        - $ref: "#/paths/~1api~1issue~1%7Bid%7D~1follow~1me/post/parameters/0"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/paths/~1api~1viewpoint~1%7Bid%7D~1replies/get/responses/200/content/ap\
                  plication~1json/schema/properties/content/items"
    put:
      summary: Update a reply
      description: This endpoint is used to update a reply
      operationId: updateReply
      tags:
        - Reply
        - Admin
      parameters:
        - $ref: "#/paths/~1api~1issue~1%7Bid%7D~1follow~1me/post/parameters/0"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/paths/~1api~1viewpoint~1%7Bid%7D~1replies/post/requestBody/content/app\
                lication~1json/schema"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/paths/~1api~1viewpoint~1%7Bid%7D~1replies/get/responses/200/content/ap\
                  plication~1json/schema/properties/content/items"
    delete:
      summary: Delete a reply
      description: This endpoint is used to delete a reply
      operationId: deleteReply
      tags:
        - Reply
        - Admin
      parameters:
        - $ref: "#/paths/~1api~1issue~1%7Bid%7D~1follow~1me/post/parameters/0"
      responses:
        "204":
          description: No content
  "/api/reply/{id}/reaction/me":
    post:
      summary: React to a reply
      description: This endpoint is used to react to a reply
      operationId: reactToReply
      tags:
        - Reply
      parameters:
        - $ref: "#/paths/~1api~1issue~1%7Bid%7D~1follow~1me/post/parameters/0"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reaction:
                  type: string
                  description: The reaction of the user
                  format: enum
                  enum:
                    - NONE
                    - LIKE
                    - REASONABLE
                    - DISLIKE
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  reaction:
                    type: string
                    description: The reaction of the user
                    format: enum
                    enum:
                      - NONE
                      - LIKE
                      - REASONABLE
                      - DISLIKE
                  likeCount:
                    type: integer
                    description: The number of likes the Reply has
                  reasonableCount:
                    type: integer
                    description: The number of reasonables the Reply has
                  dislikeCount:
                    type: integer
                    description: The number of dislikes the Reply
                  updatedAt:
                    type: string
                    format: date-time
                    description: The date and time the Reply was last updated
  /api/website/check:
    get:
      summary: Get Website Title and Icon
      description: Get the title and icon of the website.
      tags:
        - Reference
      parameters:
        - name: url
          in: query
          required: true
          description: The URL of the website
          schema:
            type: string
            format: uri
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  title:
                    type: string
                  icon:
                    type: string
                    format: uri
        "400":
          description: Website not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                  status:
                    type: number
                  title:
                    type: string
                  detail:
                    type: string
                  instance:
                    type: string
              example:
                type: type:WEBSITE_NOT_FOUND
                statue: 400
                title: Requested website not found
                detail: The website of the given URL is not found. Check the URL and try again.
  /api/user/setup:
    post:
      summary: Setup user
      description: This endpoint is used to setup a user
      operationId: setupUser
      tags:
        - UserSettings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                nickname:
                  type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                  nickname:
                    type: string
                  email:
                    type: string
                    format: email
                  role:
                    type: string
                    enum:
                      - ROLE_NOT_SETUP
                      - ROLE_USER
                      - ROLE_ADMIN
  /api/user/settings:
    get:
      summary: Get user settings
      description: This endpoint returns user settings
      operationId: getUserSettings
      tags:
        - UserSettings
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  notification:
                    type: object
                    properties:
                      newReplyInMyViewpoint:
                        type: boolean
                      newReferenceToMyReply:
                        type: boolean
                      newNodeOfTimelineToFollowedIssue:
                        type: boolean
    put:
      summary: Update user settings
      description: This endpoint is used to update user settings
      operationId: updateUserSettings
      tags:
        - UserSettings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/paths/~1api~1user~1settings/get/responses/200/content/application~1jso\
                n/schema"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/paths/~1api~1user~1settings/get/responses/200/content/application~1jso\
                  n/schema"
  /api/subscription/subscribe:
    post:
      summary: subscribe to push service
      description: This endpoint is used to add subscription to backend
      operationId: subscribePushService
      tags:
        - Subscription
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                endpoint:
                  type: string
                  description: The endpoint of push service
                keys:
                  type: object
                  properties:
                    p256dh:
                      type: string
                      description: p256dh of the subscription of the pushManager of the browser
                    auth:
                      type: string
                      description: auth of the subscription of the pushManager of the browser
      responses:
        "200":
          description: Successful response
  /api/subscription/unsubscribe:
    delete:
      summary: unsubscribe to push service
      description: This endpoint is used to remove subscription from backend
      operationId: unsubscribePushService
      tags:
        - Subscription
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                endpoint:
                  type: string
                  description: The endpoint of push service
      responses:
        "200":
          description: Successful response
  /api/user/me:
    get:
      summary: Get me
      description: This endpoint returns the current user
      operationId: getMe
      tags:
        - Users
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/paths/~1api~1user~1setup/post/responses/200/content/application~1json/\
                  schema"
  "/api/user/{username}":
    get:
      summary: Get user
      description: This endpoint returns a user
      operationId: getUser
      tags:
        - Users
      parameters:
        - name: username
          in: path
          required: true
          description: Username
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/paths/~1api~1user~1setup/post/responses/200/content/application~1json/\
                  schema"
  /api/users:
    get:
      summary: Get users
      description: This endpoint returns all users
      operationId: getUsers
      tags:
        - Users
        - Admin
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/paths/~1api~1user~1setup/post/responses/200/content/application~1json/\
                    schema"
  /api/internal/issues:
    get:
      summary: List internal issues
      description: This endpoint returns all internal issues
      operationId: getInternalIssues
      tags:
        - Internal
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      type: object
                      properties:
                        user_id:
                          type: string
                          format: uuid
                        gender:
                          type: string
                        occupation:
                          type: string
                          nullable: true
                        location:
                          type: string
                        browsing_tags:
                          type: array
                          items:
                            type: string
                        search_keywords:
                          type: array
                          items:
                            type: string
                        created_at:
                          type: string
                          format: date-time
                        last_active_at:
                          type: string
                          format: date-time
                        activity_frequency:
                          type: object
                        user_top_ip:
                          type: object
  "/api/internal/issues/{issueId}":
    get:
      summary: Get internal issue
      description: This endpoint returns specific issue information by issue id
      operationId: getInternalIssue
      tags:
        - Internal
      parameters:
        - $ref: "#/paths/~1api~1issue~1%7Bid%7D~1follow~1me/post/parameters/0"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  issue_id:
                    type: string
                    format: uuid
                  created_at:
                    type: string
                    format: date-time
                  updated_at:
                    type: string
                    format: date-time
                    description: The last time the issue title, description, or insight was updated
                  title:
                    type: string
                  publisher_id:
                    type: string
                    format: uuid
                  view_count:
                    type: integer
                  viewpoint_count:
                    type: integer
  /api/internal/users/profile:
    get:
      summary: List internal user profiles
      description: This endpoint returns all internal user profiles
      operationId: getInternalProfiles
      tags:
        - Internal
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: "#/paths/~1api~1internal~1issues~1%7BissueId%7D/get/responses/200/content\
                        /application~1json/schema"
  "/api/internal/users/profile/{userId}":
    get:
      summary: Get internal user's profile information
      description: This endpoint returns specific user's profile information by user id
      operationId: getInternalProfile
      tags:
        - Internal
      parameters:
        - $ref: "#/paths/~1api~1issue~1%7Bid%7D~1follow~1me/post/parameters/0"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/paths/~1api~1internal~1issues/get/responses/200/content/application~1j\
                  son/schema/properties/content/items"
  /api/internal/viewpoints/:
    get:
      summary: List internal viewpoints
      description: This endpoint returns all internal viewpoints
      operationId: getInternalViewpoints
      tags:
        - Internal
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      type: object
                      properties:
                        viewpoint_id:
                          type: string
                          format: uuid
                        created_at:
                          type: string
                          format: date-time
                        updated_at:
                          type: string
                          format: date-time
                        content:
                          type: string
                        author_id:
                          type: string
                          format: uuid
                        like_count:
                          type: integer
                        dislike_count:
                          type: integer
                        reasonable_count:
                          type: integer
                        view_count:
                          type: integer
                        issue_id:
                          type: string
                          format: uuid
                        fact_tags:
                          type: array
                          items:
                            type: string
                        reply_count:
                          type: integer
                        reply_content:
                          type: array
                          items:
                            $ref: "#/components/schemas/InternalViewpoint/properties/reply_content/items"
                        sentiment_score:
                          type: number
                          format: float
  "/api/internal/viewpoints/{viewpointId}":
    get:
      summary: Get internal viewpoint information
      description: This endpoint returns specific viewpoint information by viewpoint id
      operationId: getInternalViewpoint
      tags:
        - Internal
      parameters:
        - $ref: "#/paths/~1api~1issue~1%7Bid%7D~1follow~1me/post/parameters/0"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/paths/~1api~1internal~1viewpoints~1/get/responses/200/content/applicat\
                  ion~1json/schema/properties/content/items"
  /api/internal/service-account/me:
    get:
      summary: Get Service Account Information
      description: Get the information of the service account.
      tags:
        - ServiceAccount
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  name:
                    type: string
                  role:
                    type: string
                    enum:
                      - ROLE_SERVICE_ACCOUNT_READ
  "/api/internal/service-account/{serviceId}":
    delete:
      summary: Delete Service Account
      description: Delete the service account.
      tags:
        - ServiceAccount
        - Admin
      parameters:
        - name: serviceId
          in: path
          required: true
          description: The id of the service account
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: No Content
  /api/internal/service-accounts:
    get:
      summary: Get Service Accounts
      description: Get the list of service accounts.
      tags:
        - ServiceAccount
        - Admin
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/paths/~1api~1internal~1service-account~1me/get/responses/200/content/a\
                    pplication~1json/schema"
    post:
      summary: Create Service Account
      description: Create a new service account.
      tags:
        - ServiceAccount
        - Admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                role:
                  type: string
                  enum:
                    - ROLE_SERVICE_ACCOUNT_READ
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/paths/~1api~1internal~1service-account~1me/get/responses/200/content/a\
                      pplication~1json/schema"
                  - properties:
                      token:
                        type: string
                        format: uuid
  /api/text-suggestion:
    post:
      summary: Analyze the user's text input and provide suggestions
      description: When the user enters text for the first time, the system will check
        the content and highlight phrases that may need adjustments.
      operationId: getTextSuggestions
      tags:
        - TextSuggestion
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                  description: The original input text from the user that has not yet been
                    analyzed.
      responses:
        "200":
          description: Returns the original text with highlighted areas and suggestions.
          content:
            application/json:
              schema:
                type: object
                properties:
                  text:
                    type: string
                    description: The original input text from the user.
                  suggestions:
                    type: array
                    description: A list of suggested modifications, each containing highlighted
                      problematic areas.
                    items:
                      type: object
                      properties:
                        message:
                          type: string
                          description: The suggested text with highlighted parts (<sugX>).
                        feedback:
                          type: string
                          description: The feedback message explaining why the suggestion was made.
                        replacement:
                          type: string
                          description: The recommended replacement for the highlighted text.
  /api/edited-text-suggestion:
    post:
      summary: Analyze edited text and provide further recommendations
      description: When the user modifies the suggested text, this API ensures that
        the adjustments remain in line with rational discussion principles.
      operationId: getEditedTextSuggestions
      tags:
        - TextSuggestion
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                  description: The original text input.
                edited_text:
                  type: string
                  description: The user’s modified text.
                suggestions:
                  type: array
                  description: The list of previous AI suggestions and the user’s modifications.
                  items:
                    type: object
                    properties:
                      message:
                        type: string
                        description: The original suggested message from the AI.
                      edited_message:
                        type: string
                        description: The user's modified version of the message.
                      feedback:
                        type: string
                        description: The original AI feedback explaining the suggested change.
                      replacement:
                        type: string
                        description: The original AI recommended replacement.
      responses:
        "200":
          description: Returns the analyzed edited text with additional recommendations.
          content:
            application/json:
              schema:
                type: object
                properties:
                  edited_text:
                    type: string
                    description: The user-modified text.
                  suggestions:
                    type: array
                    description: A list of suggested modifications for the edited text.
                    items:
                      type: object
                      properties:
                        edited_message:
                          type: string
                          description: The modified message after user edits, with highlighted parts
                            (<sugX>).
                        feedback:
                          type: string
                          description: The feedback message explaining why further modifications are
                            needed.
                        replacement:
                          type: string
                          description: The recommended replacement for the edited text.
components:
  schemas:
    Issue:
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
          description: The last time the issue title, description, or insight was updated
        title:
          type: string
        insight:
          type: string
          example: "[San Francisco, CA](0) — In a significant leap forward for electric
            vehicle (EV) technology, researchers at [GreenTech Innovations](1)
            announced today the development of a [new battery](1,2) that could
            revolutionize the industry"
        authorId:
          type: string
          format: uuid
        authorName:
          type: string
        authorAvatar:
          type: string
          format: uri
        userFollow:
          type: object
          properties:
            follow:
              type: boolean
        viewpointCount:
          type: number
        facts:
          type: array
          description: List of fact referenced by issue's insight, displayed in the
            insight link as the position starting from 0 in the list
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
              createdAt:
                type: string
                format: date-time
              updatedAt:
                type: string
                format: date-time
              title:
                type: string
              authorId:
                type: string
                format: uuid
              authorName:
                type: string
              authorAvatar:
                type: string
                format: uri
              references:
                type: array
                items:
                  $ref: "#/components/schemas/Fact/properties/references/items"
    UpdateIssue:
      type: object
      properties:
        title:
          type: string
        insight:
          type: string
          description: It should usually be generated by the AI Team's service, but can be
            manually set by the admin
          example: "[San Francisco, CA](0) — In a significant leap forward for electric
            vehicle (EV) technology, researchers at [GreenTech Innovations](1)
            announced today the development of a [new battery](1,2) that could
            revolutionize the industry"
        facts:
          type: array
          description: List of fact referenced by issue's insight
          example:
            - f1b1b1b1-b1b1-b1b1-b1b1-b1b1b1b1b1b1
            - f2b2b2b2-b2b2-b2b2-b2b2-b2b2b2b2b2
            - f3b3b3b3-b3b3-b3b3-b3b3-b3b3b3b3b3
          items:
            type: string
            format: uuid
      required:
        - title
        - description
    IssueFacts:
      type: object
      properties:
        facts:
          type: array
          items:
            $ref: "#/components/schemas/Issue/properties/facts/items"
    IssueFollow:
      type: object
      properties:
        follow:
          type: boolean
        updatedAt:
          type: string
          format: date-time
    UpdateIssueFollow:
      type: object
      properties:
        follow:
          type: boolean
    ViewPoint:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier of the ViewPoint
        createdAt:
          type: string
          format: date-time
          description: The date and time the ViewPoint was created
        updatedAt:
          type: string
          format: date-time
          description: The date and time the ViewPoint was last updated
        title:
          type: string
          description: The name of the ViewPoint
        content:
          type: string
          description: The content of the ViewPoint
        authorId:
          type: string
          format: uuid
          description: The unique identifier of the author of the ViewPoint
        authorName:
          type: string
          description: The name of the author of the ViewPoint
        authorAvatar:
          type: string
          format: uri
        userReaction:
          type: object
          properties:
            reaction:
              type: string
              description: The reaction of the user
              format: enum
              enum:
                - NONE
                - LIKE
                - REASONABLE
                - DISLIKE
        likeCount:
          type: integer
          description: The number of likes the ViewPoint has
        reasonableCount:
          type: integer
          description: The number of resonables the ViewPoint has
        dislikeCount:
          type: integer
          description: The number of dislikes the ViewPoint has
        facts:
          type: array
          items:
            $ref: "#/components/schemas/Issue/properties/facts/items"
    UpdateViewPoint:
      type: object
      properties:
        title:
          type: string
          description: The name of the ViewPoint
        content:
          type: string
          description: The content of the ViewPoint
        facts:
          type: array
          items:
            type: string
            format: uuid
            description: The unique identifier of the fact
    ViewPointReaction:
      type: object
      properties:
        reaction:
          type: string
          description: The reaction of the user
          format: enum
          enum:
            - NONE
            - LIKE
            - REASONABLE
            - DISLIKE
    Fact:
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        title:
          type: string
        authorId:
          type: string
          format: uuid
        authorName:
          type: string
        authorAvatar:
          type: string
          format: uri
        references:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
              createdAt:
                type: string
                format: date-time
              url:
                type: string
                format: uri
              icon:
                type: string
                format: byte
              title:
                type: string
    UpdateFact:
      type: object
      properties:
        title:
          type: string
        references:
          type: array
          items:
            type: object
            properties:
              url:
                type: string
                format: uri
    Reference:
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        url:
          type: string
          format: uri
        icon:
          type: string
          format: byte
        title:
          type: string
    UpdateReference:
      type: object
      properties:
        url:
          type: string
          format: uri
    Reply:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier of the Reply
        createdAt:
          type: string
          format: date-time
          description: The date and time the Reply was created
        updatedAt:
          type: string
          format: date-time
          description: The date and time the Reply was last updated
        content:
          type: string
          description: The content of the Reply
          example: "[[Quote]](0) This is a reply [first imported fact](0) [second imported
            fact](1,2) [[Quote]](1)"
        authorId:
          type: string
          format: uuid
          description: The unique identifier of the author of the Reply
        authorName:
          type: string
          description: The name of the author of the Reply
        authorAvatar:
          type: string
          format: uri
        userReaction:
          type: object
          properties:
            reaction:
              type: string
              description: The reaction of the user
              format: enum
              enum:
                - NONE
                - LIKE
                - REASONABLE
                - DISLIKE
        likeCount:
          type: integer
          description: The number of likes the Reply has
        reasonableCount:
          type: integer
          description: The number of reasonables the Reply has
        dislikeCount:
          type: integer
          description: The number of dislikes the Reply
        quotes:
          type: array
          description: The list of quotes
          items:
            type: object
            properties:
              replyId:
                type: string
                format: uuid
                description: The id of the Reply
              authorId:
                type: string
                format: uuid
                description: The unique identifier of the author of the Reply
              authorName:
                type: string
                description: The name of the author of the Reply
              authorAvatar:
                type: string
                format: uri
              content:
                type: string
                description: The part of the content of the Reply
              start:
                type: integer
                description: The start position of the content of the Reply
              end:
                type: integer
                description: The end position of the content of the Reply
        facts:
          type: array
          items:
            $ref: "#/components/schemas/Issue/properties/facts/items"
    UpdateReply:
      type: object
      properties:
        content:
          type: string
          description: The content of the Reply
        quotes:
          type: array
          items:
            type: object
            properties:
              replyId:
                type: string
                format: uuid
                description: The id of the Reply
              start:
                type: integer
                description: The start position of the content of the Reply
              end:
                type: integer
                description: The end position of the content of the Reply
        facts:
          type: array
          items:
            type: string
            format: uuid
            description: The unique identifier of the fact
    ReplyReaction:
      type: object
      properties:
        reaction:
          type: string
          description: The reaction of the user
          format: enum
          enum:
            - NONE
            - LIKE
            - REASONABLE
            - DISLIKE
        likeCount:
          type: integer
          description: The number of likes the Reply has
        reasonableCount:
          type: integer
          description: The number of reasonables the Reply has
        dislikeCount:
          type: integer
          description: The number of dislikes the Reply
        updatedAt:
          type: string
          format: date-time
          description: The date and time the Reply was last updated
    QuoteReply:
      type: object
      properties:
        replyId:
          type: string
          format: uuid
          description: The id of the Reply
        authorId:
          type: string
          format: uuid
          description: The unique identifier of the author of the Reply
        authorName:
          type: string
          description: The name of the author of the Reply
        authorAvatar:
          type: string
          format: uri
        content:
          type: string
          description: The part of the content of the Reply
        start:
          type: integer
          description: The start position of the content of the Reply
        end:
          type: integer
          description: The end position of the content of the Reply
    Subscribe:
      type: object
      properties:
        endpoint:
          type: string
          description: The endpoint of push service
        keys:
          type: object
          properties:
            p256dh:
              type: string
              description: p256dh of the subscription of the pushManager of the browser
            auth:
              type: string
              description: auth of the subscription of the pushManager of the browser
    Unsubscribe:
      type: object
      properties:
        endpoint:
          type: string
          description: The endpoint of push service
    Pagination:
      type: object
      properties:
        size:
          type: number
        totalElement:
          type: number
        totalPage:
          type: number
        number:
          type: number
    InternalIssue:
      type: object
      properties:
        issue_id:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
          description: The last time the issue title, description, or insight was updated
        title:
          type: string
        publisher_id:
          type: string
          format: uuid
        view_count:
          type: integer
        viewpoint_count:
          type: integer
    InternalProfile:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
        gender:
          type: string
        occupation:
          type: string
          nullable: true
        location:
          type: string
        browsing_tags:
          type: array
          items:
            type: string
        search_keywords:
          type: array
          items:
            type: string
        created_at:
          type: string
          format: date-time
        last_active_at:
          type: string
          format: date-time
        activity_frequency:
          type: object
        user_top_ip:
          type: object
    InternalViewpoint:
      type: object
      properties:
        viewpoint_id:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        content:
          type: string
        author_id:
          type: string
          format: uuid
        like_count:
          type: integer
        dislike_count:
          type: integer
        reasonable_count:
          type: integer
        view_count:
          type: integer
        issue_id:
          type: string
          format: uuid
        fact_tags:
          type: array
          items:
            type: string
        reply_count:
          type: integer
        reply_content:
          type: array
          items:
            type: object
            properties:
              user_id:
                type: string
                format: uuid
                description: The unique identifier of the User
              interaction_id:
                type: string
                format: uuid
                description: The unique identifier of the Reply
              content:
                type: string
                description: The content of the Reply
                example: "[[Quote]](0) This is a reply [first imported fact](0) [second imported
                  fact](1,2) [[Quote]](1)"
              like_count:
                type: integer
                description: The number of likes the Reply has
              reasonable_count:
                type: integer
                description: The number of reasonables the Reply has
              dislike_count:
                type: integer
                description: The number of dislikes the Reply has
              timestamp:
                type: string
                format: date-time
                description: The date and time the Reply was created
        sentiment_score:
          type: number
          format: float
    TextSuggestion:
      type: object
      properties:
        message:
          type: string
          description: The suggested text with highlighted parts (<sugX>).
        feedback:
          type: string
          description: The feedback message explaining why the suggestion was made.
        replacement:
          type: string
          description: The recommended replacement for the highlighted text.
    TextSuggestionResponse:
      type: object
      properties:
        text:
          type: string
          description: The original input text from the user.
        suggestions:
          type: array
          description: A list of suggested modifications, each containing highlighted
            problematic areas.
          items:
            type: object
            properties:
              message:
                type: string
                description: The suggested text with highlighted parts (<sugX>).
              feedback:
                type: string
                description: The feedback message explaining why the suggestion was made.
              replacement:
                type: string
                description: The recommended replacement for the highlighted text.
    EditedTextSuggestion:
      type: object
      properties:
        edited_message:
          type: string
          description: The modified message after user edits, with highlighted parts
            (<sugX>).
        feedback:
          type: string
          description: The feedback message explaining why further modifications are needed.
        replacement:
          type: string
          description: The recommended replacement for the edited text.
    EditedTextSuggestionRequest:
      type: object
      properties:
        message:
          type: string
          description: The original suggested message from the AI.
        edited_message:
          type: string
          description: The user's modified version of the message.
        feedback:
          type: string
          description: The original AI feedback explaining the suggested change.
        replacement:
          type: string
          description: The original AI recommended replacement.
    EditedTextSuggestionResponse:
      type: object
      properties:
        edited_text:
          type: string
          description: The user-modified text.
        suggestions:
          type: array
          description: A list of suggested modifications for the edited text.
          items:
            type: object
            properties:
              edited_message:
                type: string
                description: The modified message after user edits, with highlighted parts
                  (<sugX>).
              feedback:
                type: string
                description: The feedback message explaining why further modifications are
                  needed.
              replacement:
                type: string
                description: The recommended replacement for the edited text.
